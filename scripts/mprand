#!/usr/bin/env perl

# The script is meant to scan the current working dir, randomize the list of files
# and play them. Useful for AMVs and other music videos.
# All the arguments are passed, so user can run 'mprand --no-videol' to play only audio.
#
# Additionally, script will fork and then preload the next file.

use strict;
use warnings;

my $player = 'mpv';
my $preload_up_to = 50;

use Cwd qw/ getcwd /;
use List::Util qw/ shuffle /;
use File::Find qw/ find /;

# This one is not in standard perl distributiion. :<
use Parallel::ForkManager;

my $cwd = getcwd;

my @files;
my @randomized_files;

# 3 because $fm->start will wait for free child.
# In best case scenario, we will have only single child
# in the background.
my $fm = new Parallel::ForkManager(3);

$fm->set_waitpid_blocking_sleep(0);

sub queue {
    # Skip non-files and files smaller than 2 MB.
    
    return if not -f;
    return if (stat($File::Find::name))[7] < 2097152;

    push(@files, $File::Find::name);
}

sub preload {
    return;
    # Fork and return, preload the beginning of file in the child
    # and then gracefully exit.

    my $file = shift;

    # Lazy check if $i+1 actually exist.
    return if not $file;

    print "[MPRAND] Preloading $file\n";

    $fm->start and return;
    open(my $fh, "<", $file) or die;
    read($fh, my $content, 1024*1024*${preload_up_to}) or die;
    undef($content);
    close($fh) or die;

    $fm->finish;
}

find({ wanted => \&queue, follow => 1}, $cwd);

while (1) {
    @randomized_files = shuffle(@files);

    # C-style loop to be able to easily lookup next item (for preload).
    for (my $i = 0; $i < @randomized_files; $i++) {
        my $file = $randomized_files[$i];

        preload($randomized_files[$i+1]);

        print "[MPRAND] Playing $file\n";

        system($player, @ARGV, $file);
        
        # exit code 4 indicate user did ^C on mpv process.
        exit(0) if $? >> 8 == 4;
    }
}

